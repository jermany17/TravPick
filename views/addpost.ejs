<%- include("include/_header") %>

<link rel="stylesheet" href="/addpost.css">

<main class="addpost-container">
    <h1 class="addpost-title">게시물 작성</h1>

    <div class="addpost-info">
        <p><%= countryName %> <%= postType %></p>
    </div>

    <!-- 글과 이미지가 추가되는 컨테이너 -->
    <div id="addpostElements" class="addpost-elements-container"></div>

    <!-- 글 작성 영역 (항상 표시) -->
    <div id="addpostTextEditorContainer" class="addpost-text-editor-container">
        <!-- 글 작성 컨테이너 추가 -->
        <div class="addpost-textarea-container">
            <textarea id="addpostTextEditor" class="addpost-textarea" placeholder="여기에 글을 작성하세요."></textarea>
        </div>
        <div class="addpost-text-buttons">
            <input type="file" id="addpostImageUpload" accept="image/*" style="display: none;">
            <span id="addpostAddImageButton" class="material-symbols-outlined addpost-icon-image">image</span>
            <span id="addpostConfirmTextButton" class="material-symbols-outlined addpost-icon-text">send</span>
        </div>
    </div>

    <button id="addpostSubmitPostButton" class="addpost-submit-button">제출</button>
</main>

<%- include("include/_footer") %>

<script>
document.addEventListener("DOMContentLoaded", () => {
    const postElements = document.getElementById("addpostElements");
    const textEditor = document.getElementById("addpostTextEditor");
    const imageUpload = document.getElementById("addpostImageUpload");

    // 이미지 추가 버튼 클릭 이벤트
    document.getElementById("addpostAddImageButton").addEventListener("click", () => {
        imageUpload.click();
    });

    // 이미지 업로드 기능
    imageUpload.addEventListener("change", (event) => {
        const file = event.target.files[0];
        if (file && file.type.startsWith("image")) {
            const reader = new FileReader();
            reader.onload = (e) => {
                const imageWrapper = document.createElement("div");
                imageWrapper.classList.add("addpost-element", "addpost-image-wrapper");

                const img = document.createElement("img");
                img.src = e.target.result;
                img.classList.add("addpost-image");

                const controls = createControls(imageWrapper);

                imageWrapper.appendChild(img);
                imageWrapper.appendChild(controls);
                postElements.appendChild(imageWrapper);
            };
            reader.readAsDataURL(file);
        }
    });

    // 글 입력 후 버튼 클릭 시 추가
    document.getElementById("addpostConfirmTextButton").addEventListener("click", () => {
        const textContentValue = textEditor.value.trim();
        if (!textContentValue) return;

        const textWrapper = document.createElement("div");
        textWrapper.classList.add("addpost-element", "addpost-text-wrapper");

        const textContent = document.createElement("div");
        textContent.classList.add("addpost-text-content");
        textContent.innerText = textContentValue;

        textWrapper.appendChild(textContent);
        textWrapper.appendChild(createControls(textWrapper));
        postElements.appendChild(textWrapper);

        textEditor.value = ""; // 입력 필드 초기화
    });

    // 컨트롤 버튼 생성 (삭제, 이동)
    function createControls(element) {
        const controls = document.createElement("div");
        controls.classList.add("addpost-controls");

        const deleteButton = document.createElement("button");
        deleteButton.classList.add("addpost-delete-button");
        deleteButton.innerHTML = `<span class="material-symbols-outlined addpost-icon-control">delete</span>`;
        deleteButton.addEventListener("click", () => {
            element.remove();
        });

        const moveUpButton = document.createElement("button");
        moveUpButton.classList.add("addpost-move-up-button");
        moveUpButton.innerHTML = `<span class="material-symbols-outlined addpost-icon-control">arrow_upward</span>`;
        moveUpButton.addEventListener("click", () => {
            if (element.previousElementSibling) {
                element.parentNode.insertBefore(element, element.previousElementSibling);
            }
        });

        const moveDownButton = document.createElement("button");
        moveDownButton.classList.add("addpost-move-down-button");
        moveDownButton.innerHTML = `<span class="material-symbols-outlined addpost-icon-control">arrow_downward</span>`;
        moveDownButton.addEventListener("click", () => {
            if (element.nextElementSibling) {
                element.parentNode.insertBefore(element.nextElementSibling, element);
            }
        });

        controls.appendChild(moveUpButton);
        controls.appendChild(moveDownButton);
        controls.appendChild(deleteButton);

        element.appendChild(controls); // 컨트롤 버튼을 해당 요소 내부에 추가
        return controls;
    }
});
</script>
