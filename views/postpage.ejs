<%- include("include/_header") %>

    <div class="postpage-container">
        <!-- 헤더 섹션 (타이틀, 작성자, 메타 정보) -->
        <div class="postpage-header">
            <!-- 좋아요 버튼 추가 -->
            <div class="like-container">
                <div id="like-button" class="like-button">
                    <span id="like-icon" class="material-symbols-outlined">favorite</span>
                    <span id="like-count">0</span>
                </div>
            </div>

            <h1 id="post-title" class="postpage-title"></h1>
            <div id="post-meta" class="postpage-meta"></div>

            <!-- 버튼 컨테이너 (수정, 삭제) -->
            <div id="post-buttons" class="postpage-buttons" style="display: none;">
                <button id="edit-post" class="postpage-button">수정</button>
                <button id="delete-post" class="postpage-button">삭제</button>
            </div>
        </div>

        <!-- 본문 내용 (이미지 & 글) -->
        <div id="post-content" class="postpage-content"></div>
    </div>

    <script>
        // 날짜 포맷 함수 추가 (yyyy. MM. dd. HH:mm:ss)
        function formatDateTime(dateString) {
            const date = new Date(dateString);
            const yyyy = date.getFullYear();
            const MM = String(date.getMonth() + 1).padStart(2, "0");
            const dd = String(date.getDate()).padStart(2, "0");
            const HH = String(date.getHours()).padStart(2, "0");
            const mm = String(date.getMinutes()).padStart(2, "0");

            return `${yyyy}. ${MM}. ${dd}. ${HH}:${mm}`;
        }

        document.addEventListener("DOMContentLoaded", async function () {
            const postId = "<%= postId.toString() %>"; // 서버에서 전달한 postId 값 사용
            const loggedInUserId = "<%= loggedInUserId ? loggedInUserId.toString() : '' %>";

            try {
                const response = await fetch(`/post/${postId}`);
                if (!response.ok) {
                    throw new Error("게시물을 불러오지 못했습니다.");
                }
                const post = await response.json();

                // 제목 및 작성자 설정
                document.getElementById("post-title").innerHTML = `${post.title} <span class="postpage-author">by ${post.userName}</span>`;

                // 메타 데이터 설정
                document.getElementById("post-meta").innerHTML = `
                <span>${post.country}</span> | 
                <span>${post.classify}</span> | 
                <span>${formatDateTime(post.createAt)}</span>
                `;

                // 콘텐츠 추가 (글과 이미지 구분)
                const contentContainer = document.getElementById("post-content");
                const imageUrls = []; // 이미지 URL 저장 배열

                post.contents.forEach(content => {
                    if (content.startsWith("https")) {
                        // 이미지 URL 저장
                        imageUrls.push(content);

                        // 이미지일 경우
                        const imgElement = document.createElement("img");
                        imgElement.src = content;
                        imgElement.className = "postpage-image";
                        contentContainer.appendChild(imgElement);
                    } else {
                        // 글일 경우
                        const textElement = document.createElement("p");
                        textElement.className = "postpage-text";
                        textElement.textContent = content;
                        contentContainer.appendChild(textElement);
                    }
                });

                console.log("postId:", postId);  // 🛠 postId 값 확인
                console.log("loggedInUserId:", loggedInUserId);  // 🛠 로그인한 사용자 ID 확인
                console.log("postuserId: ", post.userId.toString());

                // 로그인된 사용자가 게시물의 작성자와 같다면 버튼 표시
                if (loggedInUserId && loggedInUserId === post.userId.toString()) {
                    document.getElementById("post-buttons").style.display = "flex";
                }

                // 수정 버튼 이벤트
                document.getElementById("edit-post").addEventListener("click", function () {
                    window.location.href = `/changepost/${postId}`;
                });

                // 삭제 버튼 이벤트
                document.getElementById("delete-post").addEventListener("click", async function () {
                    if (confirm("게시물을 삭제하시겠습니까?")) {
                        try {
                            // 모든 이미지 삭제 요청 보내기
                            const deleteImageRequests = imageUrls.map(url => {
                                return fetch(`/s3/delete?fileUrl=${encodeURIComponent(url)}`, {
                                    method: "DELETE"
                                });
                            });

                            // 이미지 삭제 결과 확인
                            const deleteImageResponses = await Promise.all(deleteImageRequests);
                            const allDeleted = deleteImageResponses.every(response => response.ok);

                            if (!allDeleted) {
                                throw new Error("일부 이미지 삭제 실패");
                            }

                            // 모든 이미지가 삭제된 후, 게시물 삭제 요청
                            const deleteResponse = await fetch(`/post/${postId}`, {
                                method: "DELETE"
                            });

                            if (!deleteResponse.ok) {
                                throw new Error("게시물 삭제 실패");
                            }

                            alert("게시물이 삭제되었습니다.");
                            window.location.href = `/countrypage/${post.country}/${post.classify}`;
                        } catch (error) {
                            console.error("삭제 오류:", error);
                            alert("게시물을 삭제하는 데 실패했습니다.");
                        }
                    }
                });

            } catch (error) {
                console.error("데이터 로드 오류:", error);
                document.getElementById("post-content").innerHTML = "<p>게시물을 불러올 수 없습니다.</p>";
            }
        });

        document.addEventListener("DOMContentLoaded", async function () {
            const postId = "<%= postId.toString() %>";
            const loggedInUserId = "<%= loggedInUserId ? loggedInUserId.toString() : '' %>";

            const likeButton = document.getElementById("like-button");
            const likeIcon = document.getElementById("like-icon");
            const likeCountElement = document.getElementById("like-count");

            try {
                // 좋아요 개수 가져오기
                const likeResponse = await fetch(`/post/${postId}/like`);
                if (!likeResponse.ok) {
                    throw new Error("좋아요 개수를 가져올 수 없습니다.");
                }
                const likeData = await likeResponse.json();
                likeCountElement.textContent = likeData.likeCount;

                // 로그인된 경우 좋아요 상태 확인
                if (loggedInUserId) {
                    const postResponse = await fetch(`/post/${postId}`);
                    if (!postResponse.ok) {
                        throw new Error("게시물을 가져올 수 없습니다.");
                    }
                    const postData = await postResponse.json();

                    // 사용자가 좋아요를 눌렀다면 빨간색 채우기
                    if (postData.likes.includes(loggedInUserId)) {
                        likeButton.classList.add("liked");
                    }

                    // 좋아요 버튼 클릭 이벤트
                    likeButton.addEventListener("click", async function () {
                        try {
                            const toggleResponse = await fetch(`/post/${postId}/${loggedInUserId}/like`, {
                                method: "POST"
                            });

                            if (!toggleResponse.ok) {
                                throw new Error("좋아요 처리 실패");
                            }

                            const updatedLikeData = await (await fetch(`/post/${postId}/like`)).json();
                            likeCountElement.textContent = updatedLikeData.likeCount;

                            // 좋아요 토글 (채워짐/비워짐)
                            likeButton.classList.toggle("liked");
                        } catch (error) {
                            console.error("좋아요 오류:", error);
                        }
                    });
                }
            } catch (error) {
                console.error("좋아요 데이터 로드 오류:", error);
            }
        });
    </script>

    <%- include("include/_footer") %>
