<%- include("include/_header") %>

<!-- Google Material Symbols 아이콘 불러오기 -->
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />

<main>
    <!-- 지도 표시 영역 추가 -->
    <div id="chartdiv"></div>

    <div class="right-section">
        <!-- 로그인된 경우 사용자 정보 표시 -->
        <div id="userInfoBox" class="user-info-box" style="display: none;">
            <span class="material-symbols-outlined">account_circle</span>
            <div class="user-detail">
                <div class="user-info-item">
                    <span class="user-label">이름</span>
                    <span id="userName"></span>
                </div>
                <div class="user-info-item">
                    <span class="user-label">아이디</span>
                    <span id="userId"></span>
                </div>
            </div>
            <button class="mypage-button" onclick="location.href='/mypage'">내 정보</button>
        </div>
        
        <!-- 기존 문구와 로그인/로그아웃 버튼 유지 -->
        <p id="mainMessage">특별한<br>여행 정보를<br>공유하려면<br>로그인하세요!</p>
    </div>
</main>

<%- include("include/_footer") %>

<!-- amCharts 라이브러리 로드 -->
<script src="https://cdn.amcharts.com/lib/4/core.js"></script>
<script src="https://cdn.amcharts.com/lib/4/maps.js"></script>
<script src="https://cdn.amcharts.com/lib/4/geodata/worldLow.js"></script>

<script>
    async function checkLoginStatus() {
        try {
            const response = await fetch("/check-login");
            const result = await response.json();
            const mainMessage = document.getElementById("mainMessage");
  
            if (response.ok && result.isLoggedIn) {
                // 로그인된 경우 → 문구 변경
                mainMessage.innerHTML = "특별한 여행 정보를<br>공유해보세요!";
                fetchUserInfo();
            } else {
                // 로그아웃된 경우 → 기본 문구
                mainMessage.innerHTML = "특별한 여행 정보를<br>공유하려면<br>로그인하세요!";
            }
        } catch (error) {
            console.error("로그인 상태 확인 실패:", error);
        }
    }

    async function fetchUserInfo() {
        try {
            const response = await fetch("/userinfo");
            if (!response.ok) throw new Error("사용자 정보를 가져올 수 없음");

            const result = await response.json();
            document.getElementById("userName").innerText = result.userName;
            document.getElementById("userId").innerText = result.userId;
            document.getElementById("userInfoBox").style.display = "block"; // 사용자 정보 표시
        } catch (error) {
            console.error("사용자 정보 불러오기 실패:", error);
            document.getElementById("userInfoBox").style.display = "none"; // 오류 시 숨김
        }
    }
  
    checkLoginStatus();

    // amCharts를 활용한 세계 지도 생성
    am4core.ready(function() {
        let map = am4core.create("chartdiv", am4maps.MapChart);
        map.geodata = am4geodata_worldLow;
        map.projection = new am4maps.projections.Miller();

        let polygonSeries = new am4maps.MapPolygonSeries();
        polygonSeries.useGeodata = true;
        map.series.push(polygonSeries);

        let polygonTemplate = polygonSeries.mapPolygons.template;
        polygonTemplate.fill = am4core.color("#a5a8eb"); // 국가 색상
        polygonTemplate.stroke = am4core.color("#E0E8FF"); // 국가 경계선 색상
        polygonTemplate.strokeWidth = 1.5;

        map.chartContainer.background.fill = am4core.color("#E0E8FF"); // 바다 색상
        map.chartContainer.background.fillOpacity = 1;

        // [줌 컨트롤 추가] 확대/축소 버튼 표시
        let zoomControl = new am4maps.ZoomControl();
        zoomControl.slider.height = 100; // 줌 슬라이더 크기 설정

        // 버튼 스타일 변경
        zoomControl.minusButton.background.fill = am4core.color("#a5a8eb"); // - 버튼 색상
        zoomControl.plusButton.background.fill = am4core.color("#a5a8eb"); // + 버튼 색상
        zoomControl.minusButton.label.fill = am4core.color("#ffffff"); // - 버튼 텍스트 색상
        zoomControl.plusButton.label.fill = am4core.color("#ffffff"); // + 버튼 텍스트 색상

        map.zoomControl = zoomControl;
        // 마우스 휠을 이용한 줌 활성화
        map.chartContainer.wheelable = true;

         // 마우스 hover 시 국가 강조 및 툴팁 표시
        polygonTemplate.tooltipText = "{name}"; // 국가명 표시
        polygonTemplate.fillOpacity = 1;
        let hoverState = polygonTemplate.states.create("hover");
        hoverState.properties.fill = am4core.color("#40E0D0"); // 마우스 오버 시 색상 변경

        // 국가 클릭 시 alert 창 띄우기
        polygonTemplate.events.on("hit", function(ev) {
            let countryName = ev.target.dataItem.dataContext.name;
            let encodedCountryName = encodeURIComponent(countryName); // URL 인코딩
            window.location.href = `/countrypage/${encodedCountryName}`;
        });
    });
  </script>
